//
//  MainInteractor.swift
//  CryptoCurrencyApp
//
//  Created by IT-EFW-65-03 on 21/6/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol MainBusinessLogic
{
    func setup()
    func fetchData()
    func changeTab(_ currencyUint : Currency)
    func exchangeValue(_ value:String) -> String
}

protocol MainDataStore
{
    //var name: String { get set }
}

class MainInteractor: MainBusinessLogic, MainDataStore
{
    var presenter: MainPresentationLogic?
    var worker: MainWorker = MainWorker()
    private let bag = DisposeBag()
    //var name: String = ""
    
    var currencyUint: Currency = Currency.USD
    
    var currncyItem : Eur?
    var bpiList : [TempModel] = []

    // MARK: Do CryptoCurrency
    
    func setup()
    {
        worker.item.subscribe(onNext: { value in
            if let item = value {
                self.bpiList.append(TempModel(time: item.time, bpi: item.bpi))
                self.changeTab(self.currencyUint)
            }
        }).disposed(by: bag)
    }
    
    func fetchData() {
        worker.getCurrency()
    }
    
    func changeTab(_ currencyUint : Currency) {
        guard let sections = try? worker.item.value() else { return }
        var response = Main.CryptoCurrency.Response()
        switch currencyUint {
        case .USD:
            response = Main.CryptoCurrency.Response(item: sections, currencyItem: sections.bpi.usd, displayList: self.bpiList.map { Display(time: $0.time, eur: $0.bpi?.usd) })
            self.currencyUint = .USD
            currncyItem = sections.bpi.usd
            break
        case .GBP:
            response = Main.CryptoCurrency.Response(item: sections, currencyItem: sections.bpi.gbp, displayList: self.bpiList.map { Display(time: $0.time, eur: $0.bpi?.gbp) })
            self.currencyUint = .GBP
            currncyItem = sections.bpi.gbp
            break
        case .EUR:
            response = Main.CryptoCurrency.Response(item: sections, currencyItem: sections.bpi.eur, displayList: self.bpiList.map { Display(time: $0.time, eur: $0.bpi?.eur) })
            self.currencyUint = .EUR
            currncyItem = sections.bpi.eur
            break
        }
        
        self.presenter?.presentDisplay(response: response)
    }
    
    func exchangeValue(_ value:String) -> String{
        if let num = Double(value) {
            let rounded = String(format: "%f", num * (1 / (currncyItem?.rate_float ?? 0)))
            return rounded
        }else{
            print("Could not convert user input to double.")
            return "0"
        }
    }
    
}
